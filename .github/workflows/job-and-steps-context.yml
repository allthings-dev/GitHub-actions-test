# The job context is only meaningful in a step of currently running job and does not have information about any otehr job. 
# Check needs context for info on otehr jobs
# The steps context will be {} if steps do not have any id. When id is added, then steps will have data like below 
# where key "step-four" is step-id 
# Note that when step fails and continue-on-error=true, then outcome=failure, but conclusion=success
# step-four: {
#    outputs: {},
#    outcome: failure,
#    conclusion: success
#  }


name: Job and Steps Context
run-name: Job and Steps Context
on: workflow_dispatch

jobs:
  job1:
    runs-on: ubuntu-latest
    steps:
    - name: step1
      run: echo "This is step 1"
    - name: step2
      run: echo job context is "${{toJSON(job)}}"
      

  job2:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [job1]
    steps:
    - id: step-one
      name: step1
      run: echo hello world
    - id: step-two
      name: step2
      run: echo job context is "${{toJSON(job)}}"
    - id: step-three
      name: step3
      run: echo steps context is "${{toJSON(steps)}}"
    - id: step-four
      name: failing-step
      run: invalid command
      continue-on-error: true
    - id: step-five
      name: step5
      run: echo job context is "${{toJSON(job)}}"
    - id: step-six
      name: step6
      run: echo steps context is "${{toJSON(steps)}}"
      
  job3:
    runs-on: ubuntu-latest
    needs: [job2]
    steps:
    - name: step1
      run: echo "This is step 1"
    - name: step2
      run: echo job context is "${{toJSON(job)}}"
